<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:prism="http://prismlibrary.com/"
                    xmlns:converters ="clr-namespace:Prototype.Main.Converters"
                    xmlns:cntls="clr-namespace:Prototype.Main.Controls">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.CheckBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Themes/Light.Blue.xaml" />
        <ResourceDictionary Source="/Resources/Colors.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <converters:BooleanToVisibilityExConverter x:Key="BooleanToVisibilityEx"/>
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MahApps.Styles.CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
    </Style>

    <Style x:Key="ViewNavigationListBoxItem"
           TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter x:Name="ContentPresenter"
                                          Margin="5, 0, 0, 0"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{StaticResource WindowTitleColorBrush}" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource AccentColorBrush}" />
                            <Setter Property="FontWeight"
                                    Value="Bold" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush}" />
                            <Setter Property="Foreground"
                                    Value="White" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource GrayBrush7}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpandToggleStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Width"
                Value="16" />
        <Setter Property="Height"
                Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent"
                          Height="16"
                          Width="16">
                        <Path x:Name="ExpandPath"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="M 4 0 L 8 4 L 4 8 Z"
                              Fill="{DynamicResource AccentColorBrush}"
                              StrokeThickness="1"
                              Stroke="{DynamicResource AccentColorBrush}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter Property="RenderTransform"
                                    TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="45"
                                                     CenterY="4"
                                                     CenterX="4" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill"
                                    TargetName="ExpandPath"
                                    Value="{DynamicResource BlackBrush}" />
                            <Setter Property="Stroke"
                                    TargetName="ExpandPath"
                                    Value="{DynamicResource BlackBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Stroke"
                                    TargetName="ExpandPath"
                                    Value="{DynamicResource GrayBrush5}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled"
                                           Value="False" />
                                <Condition Property="IsChecked"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill"
                                    TargetName="ExpandPath"
                                    Value="{DynamicResource AccentColorBrush5}" />
                            <Setter Property="Stroke"
                                    TargetName="ExpandPath"
                                    Value="{DynamicResource AccentColorBrush5}" />
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Stroke"
                                    TargetName="ExpandPath"
                                    Value="{DynamicResource AccentColorBrush2}" />
                            <Setter Property="Fill"
                                    TargetName="ExpandPath"
                                    Value="{DynamicResource AccentColorBrush2}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HyperlinkLikeButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ContentPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
        <Setter Property="Cursor" Value="Hand" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <ControlTemplate.Resources>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="TextDecorations" Value="Underline" />
                                </Style>
                            </ControlTemplate.Resources>
                            <ContentPresenter />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <cntls:TypeBasedTemplateSelector x:Key="DetailedProjectsTemplateSelector">
        <cntls:TypeBasedTemplateSelector.Templates>
            <DataTemplate x:Key="ClassViewModel">
                <TextBlock Margin="30 1 0 1" Text="{Binding Description}"/>
            </DataTemplate>
            <DataTemplate x:Key="DependedProjectViewModel">
                <Border BorderThickness="0" Margin="0 1">
                    <StackPanel Orientation="Vertical">
                        <StackPanel Orientation="Horizontal">
                            <ToggleButton Style="{StaticResource ExpandToggleStyle}" 
                                IsChecked="{Binding IsExpanded}" ClickMode="Press"
                                          Visibility="{Binding CanExpand, Converter={StaticResource BooleanToVisibilityEx}}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <i:InvokeCommandAction Command="{Binding 
                                            DataContext.ExpandedCommand, 
                                            RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </ToggleButton>
                            <TextBlock Text="{Binding Description}"/>
                        </StackPanel>
                        <TextBlock Margin="20 0 0 0" Text="{Binding Info}"/>
                    </StackPanel>
                </Border>
            </DataTemplate>
        </cntls:TypeBasedTemplateSelector.Templates>
    </cntls:TypeBasedTemplateSelector>

</ResourceDictionary>